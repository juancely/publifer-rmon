# PySNMP SMI module. Autogenerated from smidump -f python PUB-RMON-MIB
# by libsmi2pysnmp-0.1.3 at Sun Oct 15 20:18:12 2017,
# Python version sys.version_info(major=2, minor=7, micro=9, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup")
( Bits, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "enterprises")
( TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention")

# Types

class FixedDiv10(TextualConvention, Integer32):
    displayHint = "d-1"
    
class FixedDiv10000(TextualConvention, Integer32):
    displayHint = "d-4"
    

# Objects

sensors = ModuleIdentity((1, 3, 6, 1, 4, 1, 50806)).setRevisions(("1917-10-08 18:00",))
if mibBuilder.loadTexts: sensors.setOrganization("Databang SPRL")
if mibBuilder.loadTexts: sensors.setContactInfo("   Juan Cely Ramos\n-Software Ninja-\n77, rue de Wautier\n1020 Laeken BE\njuan.cely@databang.io")
if mibBuilder.loadTexts: sensors.setDescription("IoT solutions provider")
sensorsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 50806, 1))
tsl2561Sensor = MibIdentifier((1, 3, 6, 1, 4, 1, 50806, 1, 1))
tsl2561Sensor_infraredLight = MibScalar((1, 3, 6, 1, 4, 1, 50806, 1, 1, 1), Integer32()).setMaxAccess("readonly").setLabel("tsl2561Sensor-infraredLight")
if mibBuilder.loadTexts: tsl2561Sensor_infraredLight.setDescription("Infrared light Value in lux")
tsl2561Sensor_visibleLight = MibScalar((1, 3, 6, 1, 4, 1, 50806, 1, 1, 2), Integer32()).setMaxAccess("readonly").setLabel("tsl2561Sensor-visibleLight")
if mibBuilder.loadTexts: tsl2561Sensor_visibleLight.setDescription("Visible light Value in lux")
tsl2561Sensor_fullLight = MibScalar((1, 3, 6, 1, 4, 1, 50806, 1, 1, 3), Integer32()).setMaxAccess("readonly").setLabel("tsl2561Sensor-fullLight")
if mibBuilder.loadTexts: tsl2561Sensor_fullLight.setDescription("Full visible light Value in lux")
ads7828Sensor = MibIdentifier((1, 3, 6, 1, 4, 1, 50806, 1, 2))
ads7828Sensor_value = MibScalar((1, 3, 6, 1, 4, 1, 50806, 1, 2, 1), FixedDiv10000()).setMaxAccess("readonly").setUnits("mA").setLabel("ads7828Sensor-value")
if mibBuilder.loadTexts: ads7828Sensor_value.setDescription("ADS voltage value")
tmp75Sensor = MibIdentifier((1, 3, 6, 1, 4, 1, 50806, 1, 3))
tmp75Sensor_value = MibScalar((1, 3, 6, 1, 4, 1, 50806, 1, 3, 1), FixedDiv10()).setMaxAccess("readonly").setUnits("C").setLabel("tmp75Sensor-value")
if mibBuilder.loadTexts: tmp75Sensor_value.setDescription("TMP value in celcius")
lis302Sensor = MibIdentifier((1, 3, 6, 1, 4, 1, 50806, 1, 4))
lis302Sensor_value = MibScalar((1, 3, 6, 1, 4, 1, 50806, 1, 4, 1), Integer32()).setMaxAccess("readonly").setLabel("lis302Sensor-value")
if mibBuilder.loadTexts: lis302Sensor_value.setDescription("0=ok, 1=choc, 2=down")
sensorsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 50806, 2))
sensorsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 50806, 2, 1))

# Augmentions

# Groups

tsl2561Group = ObjectGroup((1, 3, 6, 1, 4, 1, 50806, 2, 1, 1)).setObjects(*(("PUB-RMON-MIB", "tsl2561Sensor-infraredLight"), ("PUB-RMON-MIB", "tsl2561Sensor-visibleLight"), ("PUB-RMON-MIB", "tsl2561Sensor-fullLight"), ) )
if mibBuilder.loadTexts: tsl2561Group.setDescription("TSL2561 sensor")
ads7828Group = ObjectGroup((1, 3, 6, 1, 4, 1, 50806, 2, 1, 2)).setObjects(*(("PUB-RMON-MIB", "ads7828Sensor-value"), ) )
if mibBuilder.loadTexts: ads7828Group.setDescription("ADS7828 sensor")
tmp75Group = ObjectGroup((1, 3, 6, 1, 4, 1, 50806, 2, 1, 3)).setObjects(*(("PUB-RMON-MIB", "tmp75Sensor-value"), ) )
if mibBuilder.loadTexts: tmp75Group.setDescription("TMP75 sensor")
lis302Group = ObjectGroup((1, 3, 6, 1, 4, 1, 50806, 2, 1, 4)).setObjects(*(("PUB-RMON-MIB", "lis302Sensor-value"), ) )
if mibBuilder.loadTexts: lis302Group.setDescription("LIS302 sensor")

# Exports

# Module identity
mibBuilder.exportSymbols("PUB-RMON-MIB", PYSNMP_MODULE_ID=sensors)

# Types
mibBuilder.exportSymbols("PUB-RMON-MIB", FixedDiv10=FixedDiv10, FixedDiv10000=FixedDiv10000)

# Objects
mibBuilder.exportSymbols("PUB-RMON-MIB", sensors=sensors, sensorsObjects=sensorsObjects, tsl2561Sensor=tsl2561Sensor, tsl2561Sensor_infraredLight=tsl2561Sensor_infraredLight, tsl2561Sensor_visibleLight=tsl2561Sensor_visibleLight, tsl2561Sensor_fullLight=tsl2561Sensor_fullLight, ads7828Sensor=ads7828Sensor, ads7828Sensor_value=ads7828Sensor_value, tmp75Sensor=tmp75Sensor, tmp75Sensor_value=tmp75Sensor_value, lis302Sensor=lis302Sensor, lis302Sensor_value=lis302Sensor_value, sensorsConformance=sensorsConformance, sensorsGroups=sensorsGroups)

# Groups
mibBuilder.exportSymbols("PUB-RMON-MIB", tsl2561Group=tsl2561Group, ads7828Group=ads7828Group, tmp75Group=tmp75Group, lis302Group=lis302Group)

